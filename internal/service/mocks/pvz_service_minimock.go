// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i PVZ/internal/service.PVZService -o pvz_service_minimock.go -n PVZServiceMock -p mocks

import (
	"PVZ/internal/model"
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// PVZServiceMock implements mm_service.PVZService
type PVZServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreatePVZ          func(ctx context.Context, pvz *model.PVZ) (pp1 *model.PVZ, err error)
	funcCreatePVZOrigin    string
	inspectFuncCreatePVZ   func(ctx context.Context, pvz *model.PVZ)
	afterCreatePVZCounter  uint64
	beforeCreatePVZCounter uint64
	CreatePVZMock          mPVZServiceMockCreatePVZ

	funcGetAllPVZWithReceptions          func(ctx context.Context, startDate *string, endDate *string, page int, limit int) (ppa1 []*model.PVZWithReceptions, err error)
	funcGetAllPVZWithReceptionsOrigin    string
	inspectFuncGetAllPVZWithReceptions   func(ctx context.Context, startDate *string, endDate *string, page int, limit int)
	afterGetAllPVZWithReceptionsCounter  uint64
	beforeGetAllPVZWithReceptionsCounter uint64
	GetAllPVZWithReceptionsMock          mPVZServiceMockGetAllPVZWithReceptions
}

// NewPVZServiceMock returns a mock for mm_service.PVZService
func NewPVZServiceMock(t minimock.Tester) *PVZServiceMock {
	m := &PVZServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreatePVZMock = mPVZServiceMockCreatePVZ{mock: m}
	m.CreatePVZMock.callArgs = []*PVZServiceMockCreatePVZParams{}

	m.GetAllPVZWithReceptionsMock = mPVZServiceMockGetAllPVZWithReceptions{mock: m}
	m.GetAllPVZWithReceptionsMock.callArgs = []*PVZServiceMockGetAllPVZWithReceptionsParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mPVZServiceMockCreatePVZ struct {
	optional           bool
	mock               *PVZServiceMock
	defaultExpectation *PVZServiceMockCreatePVZExpectation
	expectations       []*PVZServiceMockCreatePVZExpectation

	callArgs []*PVZServiceMockCreatePVZParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// PVZServiceMockCreatePVZExpectation specifies expectation struct of the PVZService.CreatePVZ
type PVZServiceMockCreatePVZExpectation struct {
	mock               *PVZServiceMock
	params             *PVZServiceMockCreatePVZParams
	paramPtrs          *PVZServiceMockCreatePVZParamPtrs
	expectationOrigins PVZServiceMockCreatePVZExpectationOrigins
	results            *PVZServiceMockCreatePVZResults
	returnOrigin       string
	Counter            uint64
}

// PVZServiceMockCreatePVZParams contains parameters of the PVZService.CreatePVZ
type PVZServiceMockCreatePVZParams struct {
	ctx context.Context
	pvz *model.PVZ
}

// PVZServiceMockCreatePVZParamPtrs contains pointers to parameters of the PVZService.CreatePVZ
type PVZServiceMockCreatePVZParamPtrs struct {
	ctx *context.Context
	pvz **model.PVZ
}

// PVZServiceMockCreatePVZResults contains results of the PVZService.CreatePVZ
type PVZServiceMockCreatePVZResults struct {
	pp1 *model.PVZ
	err error
}

// PVZServiceMockCreatePVZOrigins contains origins of expectations of the PVZService.CreatePVZ
type PVZServiceMockCreatePVZExpectationOrigins struct {
	origin    string
	originCtx string
	originPvz string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) Optional() *mPVZServiceMockCreatePVZ {
	mmCreatePVZ.optional = true
	return mmCreatePVZ
}

// Expect sets up expected params for PVZService.CreatePVZ
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) Expect(ctx context.Context, pvz *model.PVZ) *mPVZServiceMockCreatePVZ {
	if mmCreatePVZ.mock.funcCreatePVZ != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by Set")
	}

	if mmCreatePVZ.defaultExpectation == nil {
		mmCreatePVZ.defaultExpectation = &PVZServiceMockCreatePVZExpectation{}
	}

	if mmCreatePVZ.defaultExpectation.paramPtrs != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by ExpectParams functions")
	}

	mmCreatePVZ.defaultExpectation.params = &PVZServiceMockCreatePVZParams{ctx, pvz}
	mmCreatePVZ.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreatePVZ.expectations {
		if minimock.Equal(e.params, mmCreatePVZ.defaultExpectation.params) {
			mmCreatePVZ.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreatePVZ.defaultExpectation.params)
		}
	}

	return mmCreatePVZ
}

// ExpectCtxParam1 sets up expected param ctx for PVZService.CreatePVZ
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) ExpectCtxParam1(ctx context.Context) *mPVZServiceMockCreatePVZ {
	if mmCreatePVZ.mock.funcCreatePVZ != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by Set")
	}

	if mmCreatePVZ.defaultExpectation == nil {
		mmCreatePVZ.defaultExpectation = &PVZServiceMockCreatePVZExpectation{}
	}

	if mmCreatePVZ.defaultExpectation.params != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by Expect")
	}

	if mmCreatePVZ.defaultExpectation.paramPtrs == nil {
		mmCreatePVZ.defaultExpectation.paramPtrs = &PVZServiceMockCreatePVZParamPtrs{}
	}
	mmCreatePVZ.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreatePVZ.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreatePVZ
}

// ExpectPvzParam2 sets up expected param pvz for PVZService.CreatePVZ
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) ExpectPvzParam2(pvz *model.PVZ) *mPVZServiceMockCreatePVZ {
	if mmCreatePVZ.mock.funcCreatePVZ != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by Set")
	}

	if mmCreatePVZ.defaultExpectation == nil {
		mmCreatePVZ.defaultExpectation = &PVZServiceMockCreatePVZExpectation{}
	}

	if mmCreatePVZ.defaultExpectation.params != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by Expect")
	}

	if mmCreatePVZ.defaultExpectation.paramPtrs == nil {
		mmCreatePVZ.defaultExpectation.paramPtrs = &PVZServiceMockCreatePVZParamPtrs{}
	}
	mmCreatePVZ.defaultExpectation.paramPtrs.pvz = &pvz
	mmCreatePVZ.defaultExpectation.expectationOrigins.originPvz = minimock.CallerInfo(1)

	return mmCreatePVZ
}

// Inspect accepts an inspector function that has same arguments as the PVZService.CreatePVZ
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) Inspect(f func(ctx context.Context, pvz *model.PVZ)) *mPVZServiceMockCreatePVZ {
	if mmCreatePVZ.mock.inspectFuncCreatePVZ != nil {
		mmCreatePVZ.mock.t.Fatalf("Inspect function is already set for PVZServiceMock.CreatePVZ")
	}

	mmCreatePVZ.mock.inspectFuncCreatePVZ = f

	return mmCreatePVZ
}

// Return sets up results that will be returned by PVZService.CreatePVZ
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) Return(pp1 *model.PVZ, err error) *PVZServiceMock {
	if mmCreatePVZ.mock.funcCreatePVZ != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by Set")
	}

	if mmCreatePVZ.defaultExpectation == nil {
		mmCreatePVZ.defaultExpectation = &PVZServiceMockCreatePVZExpectation{mock: mmCreatePVZ.mock}
	}
	mmCreatePVZ.defaultExpectation.results = &PVZServiceMockCreatePVZResults{pp1, err}
	mmCreatePVZ.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreatePVZ.mock
}

// Set uses given function f to mock the PVZService.CreatePVZ method
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) Set(f func(ctx context.Context, pvz *model.PVZ) (pp1 *model.PVZ, err error)) *PVZServiceMock {
	if mmCreatePVZ.defaultExpectation != nil {
		mmCreatePVZ.mock.t.Fatalf("Default expectation is already set for the PVZService.CreatePVZ method")
	}

	if len(mmCreatePVZ.expectations) > 0 {
		mmCreatePVZ.mock.t.Fatalf("Some expectations are already set for the PVZService.CreatePVZ method")
	}

	mmCreatePVZ.mock.funcCreatePVZ = f
	mmCreatePVZ.mock.funcCreatePVZOrigin = minimock.CallerInfo(1)
	return mmCreatePVZ.mock
}

// When sets expectation for the PVZService.CreatePVZ which will trigger the result defined by the following
// Then helper
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) When(ctx context.Context, pvz *model.PVZ) *PVZServiceMockCreatePVZExpectation {
	if mmCreatePVZ.mock.funcCreatePVZ != nil {
		mmCreatePVZ.mock.t.Fatalf("PVZServiceMock.CreatePVZ mock is already set by Set")
	}

	expectation := &PVZServiceMockCreatePVZExpectation{
		mock:               mmCreatePVZ.mock,
		params:             &PVZServiceMockCreatePVZParams{ctx, pvz},
		expectationOrigins: PVZServiceMockCreatePVZExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreatePVZ.expectations = append(mmCreatePVZ.expectations, expectation)
	return expectation
}

// Then sets up PVZService.CreatePVZ return parameters for the expectation previously defined by the When method
func (e *PVZServiceMockCreatePVZExpectation) Then(pp1 *model.PVZ, err error) *PVZServiceMock {
	e.results = &PVZServiceMockCreatePVZResults{pp1, err}
	return e.mock
}

// Times sets number of times PVZService.CreatePVZ should be invoked
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) Times(n uint64) *mPVZServiceMockCreatePVZ {
	if n == 0 {
		mmCreatePVZ.mock.t.Fatalf("Times of PVZServiceMock.CreatePVZ mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreatePVZ.expectedInvocations, n)
	mmCreatePVZ.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreatePVZ
}

func (mmCreatePVZ *mPVZServiceMockCreatePVZ) invocationsDone() bool {
	if len(mmCreatePVZ.expectations) == 0 && mmCreatePVZ.defaultExpectation == nil && mmCreatePVZ.mock.funcCreatePVZ == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreatePVZ.mock.afterCreatePVZCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreatePVZ.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreatePVZ implements mm_service.PVZService
func (mmCreatePVZ *PVZServiceMock) CreatePVZ(ctx context.Context, pvz *model.PVZ) (pp1 *model.PVZ, err error) {
	mm_atomic.AddUint64(&mmCreatePVZ.beforeCreatePVZCounter, 1)
	defer mm_atomic.AddUint64(&mmCreatePVZ.afterCreatePVZCounter, 1)

	mmCreatePVZ.t.Helper()

	if mmCreatePVZ.inspectFuncCreatePVZ != nil {
		mmCreatePVZ.inspectFuncCreatePVZ(ctx, pvz)
	}

	mm_params := PVZServiceMockCreatePVZParams{ctx, pvz}

	// Record call args
	mmCreatePVZ.CreatePVZMock.mutex.Lock()
	mmCreatePVZ.CreatePVZMock.callArgs = append(mmCreatePVZ.CreatePVZMock.callArgs, &mm_params)
	mmCreatePVZ.CreatePVZMock.mutex.Unlock()

	for _, e := range mmCreatePVZ.CreatePVZMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp1, e.results.err
		}
	}

	if mmCreatePVZ.CreatePVZMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreatePVZ.CreatePVZMock.defaultExpectation.Counter, 1)
		mm_want := mmCreatePVZ.CreatePVZMock.defaultExpectation.params
		mm_want_ptrs := mmCreatePVZ.CreatePVZMock.defaultExpectation.paramPtrs

		mm_got := PVZServiceMockCreatePVZParams{ctx, pvz}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreatePVZ.t.Errorf("PVZServiceMock.CreatePVZ got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreatePVZ.CreatePVZMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.pvz != nil && !minimock.Equal(*mm_want_ptrs.pvz, mm_got.pvz) {
				mmCreatePVZ.t.Errorf("PVZServiceMock.CreatePVZ got unexpected parameter pvz, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreatePVZ.CreatePVZMock.defaultExpectation.expectationOrigins.originPvz, *mm_want_ptrs.pvz, mm_got.pvz, minimock.Diff(*mm_want_ptrs.pvz, mm_got.pvz))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreatePVZ.t.Errorf("PVZServiceMock.CreatePVZ got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreatePVZ.CreatePVZMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreatePVZ.CreatePVZMock.defaultExpectation.results
		if mm_results == nil {
			mmCreatePVZ.t.Fatal("No results are set for the PVZServiceMock.CreatePVZ")
		}
		return (*mm_results).pp1, (*mm_results).err
	}
	if mmCreatePVZ.funcCreatePVZ != nil {
		return mmCreatePVZ.funcCreatePVZ(ctx, pvz)
	}
	mmCreatePVZ.t.Fatalf("Unexpected call to PVZServiceMock.CreatePVZ. %v %v", ctx, pvz)
	return
}

// CreatePVZAfterCounter returns a count of finished PVZServiceMock.CreatePVZ invocations
func (mmCreatePVZ *PVZServiceMock) CreatePVZAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreatePVZ.afterCreatePVZCounter)
}

// CreatePVZBeforeCounter returns a count of PVZServiceMock.CreatePVZ invocations
func (mmCreatePVZ *PVZServiceMock) CreatePVZBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreatePVZ.beforeCreatePVZCounter)
}

// Calls returns a list of arguments used in each call to PVZServiceMock.CreatePVZ.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreatePVZ *mPVZServiceMockCreatePVZ) Calls() []*PVZServiceMockCreatePVZParams {
	mmCreatePVZ.mutex.RLock()

	argCopy := make([]*PVZServiceMockCreatePVZParams, len(mmCreatePVZ.callArgs))
	copy(argCopy, mmCreatePVZ.callArgs)

	mmCreatePVZ.mutex.RUnlock()

	return argCopy
}

// MinimockCreatePVZDone returns true if the count of the CreatePVZ invocations corresponds
// the number of defined expectations
func (m *PVZServiceMock) MinimockCreatePVZDone() bool {
	if m.CreatePVZMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreatePVZMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreatePVZMock.invocationsDone()
}

// MinimockCreatePVZInspect logs each unmet expectation
func (m *PVZServiceMock) MinimockCreatePVZInspect() {
	for _, e := range m.CreatePVZMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PVZServiceMock.CreatePVZ at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreatePVZCounter := mm_atomic.LoadUint64(&m.afterCreatePVZCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreatePVZMock.defaultExpectation != nil && afterCreatePVZCounter < 1 {
		if m.CreatePVZMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to PVZServiceMock.CreatePVZ at\n%s", m.CreatePVZMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to PVZServiceMock.CreatePVZ at\n%s with params: %#v", m.CreatePVZMock.defaultExpectation.expectationOrigins.origin, *m.CreatePVZMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreatePVZ != nil && afterCreatePVZCounter < 1 {
		m.t.Errorf("Expected call to PVZServiceMock.CreatePVZ at\n%s", m.funcCreatePVZOrigin)
	}

	if !m.CreatePVZMock.invocationsDone() && afterCreatePVZCounter > 0 {
		m.t.Errorf("Expected %d calls to PVZServiceMock.CreatePVZ at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreatePVZMock.expectedInvocations), m.CreatePVZMock.expectedInvocationsOrigin, afterCreatePVZCounter)
	}
}

type mPVZServiceMockGetAllPVZWithReceptions struct {
	optional           bool
	mock               *PVZServiceMock
	defaultExpectation *PVZServiceMockGetAllPVZWithReceptionsExpectation
	expectations       []*PVZServiceMockGetAllPVZWithReceptionsExpectation

	callArgs []*PVZServiceMockGetAllPVZWithReceptionsParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// PVZServiceMockGetAllPVZWithReceptionsExpectation specifies expectation struct of the PVZService.GetAllPVZWithReceptions
type PVZServiceMockGetAllPVZWithReceptionsExpectation struct {
	mock               *PVZServiceMock
	params             *PVZServiceMockGetAllPVZWithReceptionsParams
	paramPtrs          *PVZServiceMockGetAllPVZWithReceptionsParamPtrs
	expectationOrigins PVZServiceMockGetAllPVZWithReceptionsExpectationOrigins
	results            *PVZServiceMockGetAllPVZWithReceptionsResults
	returnOrigin       string
	Counter            uint64
}

// PVZServiceMockGetAllPVZWithReceptionsParams contains parameters of the PVZService.GetAllPVZWithReceptions
type PVZServiceMockGetAllPVZWithReceptionsParams struct {
	ctx       context.Context
	startDate *string
	endDate   *string
	page      int
	limit     int
}

// PVZServiceMockGetAllPVZWithReceptionsParamPtrs contains pointers to parameters of the PVZService.GetAllPVZWithReceptions
type PVZServiceMockGetAllPVZWithReceptionsParamPtrs struct {
	ctx       *context.Context
	startDate **string
	endDate   **string
	page      *int
	limit     *int
}

// PVZServiceMockGetAllPVZWithReceptionsResults contains results of the PVZService.GetAllPVZWithReceptions
type PVZServiceMockGetAllPVZWithReceptionsResults struct {
	ppa1 []*model.PVZWithReceptions
	err  error
}

// PVZServiceMockGetAllPVZWithReceptionsOrigins contains origins of expectations of the PVZService.GetAllPVZWithReceptions
type PVZServiceMockGetAllPVZWithReceptionsExpectationOrigins struct {
	origin          string
	originCtx       string
	originStartDate string
	originEndDate   string
	originPage      string
	originLimit     string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetAllPVZWithReceptions *mPVZServiceMockGetAllPVZWithReceptions) Optional() *mPVZServiceMockGetAllPVZWithReceptions {
	mmGetAllPVZWithReceptions.optional = true
	return mmGetAllPVZWithReceptions
}

// Expect sets up expected params for PVZService.GetAllPVZWithReceptions
func (mmGetAllPVZWithReceptions *mPVZServiceMockGetAllPVZWithReceptions) Expect(ctx context.Context, startDate *string, endDate *string, page int, limit int) *mPVZServiceMockGetAllPVZWithReceptions {
	if mmGetAllPVZWithReceptions.mock.funcGetAllPVZWithReceptions != nil {
		mmGetAllPVZWithReceptions.mock.t.Fatalf("PVZServiceMock.GetAllPVZWithReceptions mock is already set by Set")
	}

	if mmGetAllPVZWithReceptions.defaultExpectation == nil {
		mmGetAllPVZWithReceptions.defaultExpectation = &PVZServiceMockGetAllPVZWithReceptionsExpectation{}
	}

	if mmGetAllPVZWithReceptions.defaultExpectation.paramPtrs != nil {
		mmGetAllPVZWithReceptions.mock.t.Fatalf("PVZServiceMock.GetAllPVZWithReceptions mock is already set by ExpectParams functions")
	}

	mmGetAllPVZWithReceptions.defaultExpectation.params = &PVZServiceMockGetAllPVZWithReceptionsParams{ctx, startDate, endDate, page, limit}
	mmGetAllPVZWithReceptions.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetAllPVZWithReceptions.expectations {
		if minimock.Equal(e.params, mmGetAllPVZWithReceptions.defaultExpectation.params) {
			mmGetAllPVZWithReceptions.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetAllPVZWithReceptions.defaultExpectation.params)
		}
	}

	return mmGetAllPVZWithReceptions
}

// ExpectCtxParam1 sets up expected param ctx for PVZService.GetAllPVZWithReceptions
func (mmGetAllPVZWithReceptions *mPVZServiceMockGetAllPVZWithReceptions) ExpectCtxParam1(ctx context.Context) *mPVZServiceMockGetAllPVZWithReceptions {
	if mmGetAllPVZWithReceptions.mock.funcGetAllPVZWithReceptions != nil {
		mmGetAllPVZWithReceptions.mock.t.Fatalf("PVZServiceMock.GetAllPVZWithReceptions mock is already set by Set")
	}

	if mmGetAllPVZWithReceptions.defaultExpectation == nil {
		mmGetAllPVZWithReceptions.defaultExpectation = &PVZServiceMockGetAllPVZWithReceptionsExpectation{}
	}

	if mmGetAllPVZWithReceptions.defaultExpectation.params != nil {
		mmGetAllPVZWithReceptions.mock.t.Fatalf("PVZServiceMock.GetAllPVZWithReceptions mock is already set by Expect")
	}

	if mmGetAllPVZWithReceptions.defaultExpectation.paramPtrs == nil {
		mmGetAllPVZWithReceptions.defaultExpectation.paramPtrs = &PVZServiceMockGetAllPVZWithReceptionsParamPtrs{}
	}
	mmGetAllPVZWithReceptions.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetAllPVZWithReceptions.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetAllPVZWithReceptions
}

// ExpectStartDateParam2 sets up expected param startDate for PVZService.GetAllPVZWithReceptions
func (mmGetAllPVZWithReceptions *mPVZServiceMockGetAllPVZWithReceptions) ExpectStartDateParam2(startDate *string) *mPVZServiceMockGetAllPVZWithReceptions {
	if mmGetAllPVZWithReceptions.mock.funcGetAllPVZWithReceptions != nil {
		mmGetAllPVZWithReceptions.mock.t.Fatalf("PVZServiceMock.GetAllPVZWithReceptions mock is already set by Set")
	}

	if mmGetAllPVZWithReceptions.defaultExpectation == nil {
		mmGetAllPVZWithReceptions.defaultExpectation = &PVZServiceMockGetAllPVZWithReceptionsExpectation{}
	}

	if mmGetAllPVZWithReceptions.defaultExpectation.params != nil {
		mmGetAllPVZWithReceptions.mock.t.Fatalf("PVZServiceMock.GetAllPVZWithReceptions mock is already set by Expect")
	}

	if mmGetAllPVZWithReceptions.defaultExpectation.paramPtrs == nil {
		mmGetAllPVZWithReceptions.defaultExpectation.paramPtrs = &PVZServiceMockGetAllPVZWithReceptionsParamPtrs{}
	}
	mmGetAllPVZWithReceptions.defaultExpectation.paramPtrs.startDate = &startDate
	mmGetAllPVZWithReceptions.defaultExpectation.expectationOrigins.originStartDate = minimock.CallerInfo(1)

	return mmGetAllPVZWithReceptions
}

// ExpectEndDateParam3 sets up expected param endDate for PVZService.GetAllPVZWithReceptions
func (mmGetAllPVZWithReceptions *mPVZServiceMockGetAllPVZWithReceptions) ExpectEndDateParam3(endDate *string) *mPVZServiceMockGetAllPVZWithReceptions {
	if mmGetAllPVZWithReceptions.mock.funcGetAllPVZWithReceptions != nil {
		mmGetAllPVZWithReceptions.mock.t.Fatalf("PVZServiceMock.GetAllPVZWithReceptions mock is already set by Set")
	}

	if mmGetAllPVZWithReceptions.defaultExpectation == nil {
		mmGetAllPVZWithReceptions.defaultExpectation = &PVZServiceMockGetAllPVZWithReceptionsExpectation{}
	}

	if mmGetAllPVZWithReceptions.defaultExpectation.params != nil {
		mmGetAllPVZWithReceptions.mock.t.Fatalf("PVZServiceMock.GetAllPVZWithReceptions mock is already set by Expect")
	}

	if mmGetAllPVZWithReceptions.defaultExpectation.paramPtrs == nil {
		mmGetAllPVZWithReceptions.defaultExpectation.paramPtrs = &PVZServiceMockGetAllPVZWithReceptionsParamPtrs{}
	}
	mmGetAllPVZWithReceptions.defaultExpectation.paramPtrs.endDate = &endDate
	mmGetAllPVZWithReceptions.defaultExpectation.expectationOrigins.originEndDate = minimock.CallerInfo(1)

	return mmGetAllPVZWithReceptions
}

// ExpectPageParam4 sets up expected param page for PVZService.GetAllPVZWithReceptions
func (mmGetAllPVZWithReceptions *mPVZServiceMockGetAllPVZWithReceptions) ExpectPageParam4(page int) *mPVZServiceMockGetAllPVZWithReceptions {
	if mmGetAllPVZWithReceptions.mock.funcGetAllPVZWithReceptions != nil {
		mmGetAllPVZWithReceptions.mock.t.Fatalf("PVZServiceMock.GetAllPVZWithReceptions mock is already set by Set")
	}

	if mmGetAllPVZWithReceptions.defaultExpectation == nil {
		mmGetAllPVZWithReceptions.defaultExpectation = &PVZServiceMockGetAllPVZWithReceptionsExpectation{}
	}

	if mmGetAllPVZWithReceptions.defaultExpectation.params != nil {
		mmGetAllPVZWithReceptions.mock.t.Fatalf("PVZServiceMock.GetAllPVZWithReceptions mock is already set by Expect")
	}

	if mmGetAllPVZWithReceptions.defaultExpectation.paramPtrs == nil {
		mmGetAllPVZWithReceptions.defaultExpectation.paramPtrs = &PVZServiceMockGetAllPVZWithReceptionsParamPtrs{}
	}
	mmGetAllPVZWithReceptions.defaultExpectation.paramPtrs.page = &page
	mmGetAllPVZWithReceptions.defaultExpectation.expectationOrigins.originPage = minimock.CallerInfo(1)

	return mmGetAllPVZWithReceptions
}

// ExpectLimitParam5 sets up expected param limit for PVZService.GetAllPVZWithReceptions
func (mmGetAllPVZWithReceptions *mPVZServiceMockGetAllPVZWithReceptions) ExpectLimitParam5(limit int) *mPVZServiceMockGetAllPVZWithReceptions {
	if mmGetAllPVZWithReceptions.mock.funcGetAllPVZWithReceptions != nil {
		mmGetAllPVZWithReceptions.mock.t.Fatalf("PVZServiceMock.GetAllPVZWithReceptions mock is already set by Set")
	}

	if mmGetAllPVZWithReceptions.defaultExpectation == nil {
		mmGetAllPVZWithReceptions.defaultExpectation = &PVZServiceMockGetAllPVZWithReceptionsExpectation{}
	}

	if mmGetAllPVZWithReceptions.defaultExpectation.params != nil {
		mmGetAllPVZWithReceptions.mock.t.Fatalf("PVZServiceMock.GetAllPVZWithReceptions mock is already set by Expect")
	}

	if mmGetAllPVZWithReceptions.defaultExpectation.paramPtrs == nil {
		mmGetAllPVZWithReceptions.defaultExpectation.paramPtrs = &PVZServiceMockGetAllPVZWithReceptionsParamPtrs{}
	}
	mmGetAllPVZWithReceptions.defaultExpectation.paramPtrs.limit = &limit
	mmGetAllPVZWithReceptions.defaultExpectation.expectationOrigins.originLimit = minimock.CallerInfo(1)

	return mmGetAllPVZWithReceptions
}

// Inspect accepts an inspector function that has same arguments as the PVZService.GetAllPVZWithReceptions
func (mmGetAllPVZWithReceptions *mPVZServiceMockGetAllPVZWithReceptions) Inspect(f func(ctx context.Context, startDate *string, endDate *string, page int, limit int)) *mPVZServiceMockGetAllPVZWithReceptions {
	if mmGetAllPVZWithReceptions.mock.inspectFuncGetAllPVZWithReceptions != nil {
		mmGetAllPVZWithReceptions.mock.t.Fatalf("Inspect function is already set for PVZServiceMock.GetAllPVZWithReceptions")
	}

	mmGetAllPVZWithReceptions.mock.inspectFuncGetAllPVZWithReceptions = f

	return mmGetAllPVZWithReceptions
}

// Return sets up results that will be returned by PVZService.GetAllPVZWithReceptions
func (mmGetAllPVZWithReceptions *mPVZServiceMockGetAllPVZWithReceptions) Return(ppa1 []*model.PVZWithReceptions, err error) *PVZServiceMock {
	if mmGetAllPVZWithReceptions.mock.funcGetAllPVZWithReceptions != nil {
		mmGetAllPVZWithReceptions.mock.t.Fatalf("PVZServiceMock.GetAllPVZWithReceptions mock is already set by Set")
	}

	if mmGetAllPVZWithReceptions.defaultExpectation == nil {
		mmGetAllPVZWithReceptions.defaultExpectation = &PVZServiceMockGetAllPVZWithReceptionsExpectation{mock: mmGetAllPVZWithReceptions.mock}
	}
	mmGetAllPVZWithReceptions.defaultExpectation.results = &PVZServiceMockGetAllPVZWithReceptionsResults{ppa1, err}
	mmGetAllPVZWithReceptions.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetAllPVZWithReceptions.mock
}

// Set uses given function f to mock the PVZService.GetAllPVZWithReceptions method
func (mmGetAllPVZWithReceptions *mPVZServiceMockGetAllPVZWithReceptions) Set(f func(ctx context.Context, startDate *string, endDate *string, page int, limit int) (ppa1 []*model.PVZWithReceptions, err error)) *PVZServiceMock {
	if mmGetAllPVZWithReceptions.defaultExpectation != nil {
		mmGetAllPVZWithReceptions.mock.t.Fatalf("Default expectation is already set for the PVZService.GetAllPVZWithReceptions method")
	}

	if len(mmGetAllPVZWithReceptions.expectations) > 0 {
		mmGetAllPVZWithReceptions.mock.t.Fatalf("Some expectations are already set for the PVZService.GetAllPVZWithReceptions method")
	}

	mmGetAllPVZWithReceptions.mock.funcGetAllPVZWithReceptions = f
	mmGetAllPVZWithReceptions.mock.funcGetAllPVZWithReceptionsOrigin = minimock.CallerInfo(1)
	return mmGetAllPVZWithReceptions.mock
}

// When sets expectation for the PVZService.GetAllPVZWithReceptions which will trigger the result defined by the following
// Then helper
func (mmGetAllPVZWithReceptions *mPVZServiceMockGetAllPVZWithReceptions) When(ctx context.Context, startDate *string, endDate *string, page int, limit int) *PVZServiceMockGetAllPVZWithReceptionsExpectation {
	if mmGetAllPVZWithReceptions.mock.funcGetAllPVZWithReceptions != nil {
		mmGetAllPVZWithReceptions.mock.t.Fatalf("PVZServiceMock.GetAllPVZWithReceptions mock is already set by Set")
	}

	expectation := &PVZServiceMockGetAllPVZWithReceptionsExpectation{
		mock:               mmGetAllPVZWithReceptions.mock,
		params:             &PVZServiceMockGetAllPVZWithReceptionsParams{ctx, startDate, endDate, page, limit},
		expectationOrigins: PVZServiceMockGetAllPVZWithReceptionsExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetAllPVZWithReceptions.expectations = append(mmGetAllPVZWithReceptions.expectations, expectation)
	return expectation
}

// Then sets up PVZService.GetAllPVZWithReceptions return parameters for the expectation previously defined by the When method
func (e *PVZServiceMockGetAllPVZWithReceptionsExpectation) Then(ppa1 []*model.PVZWithReceptions, err error) *PVZServiceMock {
	e.results = &PVZServiceMockGetAllPVZWithReceptionsResults{ppa1, err}
	return e.mock
}

// Times sets number of times PVZService.GetAllPVZWithReceptions should be invoked
func (mmGetAllPVZWithReceptions *mPVZServiceMockGetAllPVZWithReceptions) Times(n uint64) *mPVZServiceMockGetAllPVZWithReceptions {
	if n == 0 {
		mmGetAllPVZWithReceptions.mock.t.Fatalf("Times of PVZServiceMock.GetAllPVZWithReceptions mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetAllPVZWithReceptions.expectedInvocations, n)
	mmGetAllPVZWithReceptions.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetAllPVZWithReceptions
}

func (mmGetAllPVZWithReceptions *mPVZServiceMockGetAllPVZWithReceptions) invocationsDone() bool {
	if len(mmGetAllPVZWithReceptions.expectations) == 0 && mmGetAllPVZWithReceptions.defaultExpectation == nil && mmGetAllPVZWithReceptions.mock.funcGetAllPVZWithReceptions == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetAllPVZWithReceptions.mock.afterGetAllPVZWithReceptionsCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetAllPVZWithReceptions.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetAllPVZWithReceptions implements mm_service.PVZService
func (mmGetAllPVZWithReceptions *PVZServiceMock) GetAllPVZWithReceptions(ctx context.Context, startDate *string, endDate *string, page int, limit int) (ppa1 []*model.PVZWithReceptions, err error) {
	mm_atomic.AddUint64(&mmGetAllPVZWithReceptions.beforeGetAllPVZWithReceptionsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetAllPVZWithReceptions.afterGetAllPVZWithReceptionsCounter, 1)

	mmGetAllPVZWithReceptions.t.Helper()

	if mmGetAllPVZWithReceptions.inspectFuncGetAllPVZWithReceptions != nil {
		mmGetAllPVZWithReceptions.inspectFuncGetAllPVZWithReceptions(ctx, startDate, endDate, page, limit)
	}

	mm_params := PVZServiceMockGetAllPVZWithReceptionsParams{ctx, startDate, endDate, page, limit}

	// Record call args
	mmGetAllPVZWithReceptions.GetAllPVZWithReceptionsMock.mutex.Lock()
	mmGetAllPVZWithReceptions.GetAllPVZWithReceptionsMock.callArgs = append(mmGetAllPVZWithReceptions.GetAllPVZWithReceptionsMock.callArgs, &mm_params)
	mmGetAllPVZWithReceptions.GetAllPVZWithReceptionsMock.mutex.Unlock()

	for _, e := range mmGetAllPVZWithReceptions.GetAllPVZWithReceptionsMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ppa1, e.results.err
		}
	}

	if mmGetAllPVZWithReceptions.GetAllPVZWithReceptionsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetAllPVZWithReceptions.GetAllPVZWithReceptionsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetAllPVZWithReceptions.GetAllPVZWithReceptionsMock.defaultExpectation.params
		mm_want_ptrs := mmGetAllPVZWithReceptions.GetAllPVZWithReceptionsMock.defaultExpectation.paramPtrs

		mm_got := PVZServiceMockGetAllPVZWithReceptionsParams{ctx, startDate, endDate, page, limit}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetAllPVZWithReceptions.t.Errorf("PVZServiceMock.GetAllPVZWithReceptions got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAllPVZWithReceptions.GetAllPVZWithReceptionsMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.startDate != nil && !minimock.Equal(*mm_want_ptrs.startDate, mm_got.startDate) {
				mmGetAllPVZWithReceptions.t.Errorf("PVZServiceMock.GetAllPVZWithReceptions got unexpected parameter startDate, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAllPVZWithReceptions.GetAllPVZWithReceptionsMock.defaultExpectation.expectationOrigins.originStartDate, *mm_want_ptrs.startDate, mm_got.startDate, minimock.Diff(*mm_want_ptrs.startDate, mm_got.startDate))
			}

			if mm_want_ptrs.endDate != nil && !minimock.Equal(*mm_want_ptrs.endDate, mm_got.endDate) {
				mmGetAllPVZWithReceptions.t.Errorf("PVZServiceMock.GetAllPVZWithReceptions got unexpected parameter endDate, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAllPVZWithReceptions.GetAllPVZWithReceptionsMock.defaultExpectation.expectationOrigins.originEndDate, *mm_want_ptrs.endDate, mm_got.endDate, minimock.Diff(*mm_want_ptrs.endDate, mm_got.endDate))
			}

			if mm_want_ptrs.page != nil && !minimock.Equal(*mm_want_ptrs.page, mm_got.page) {
				mmGetAllPVZWithReceptions.t.Errorf("PVZServiceMock.GetAllPVZWithReceptions got unexpected parameter page, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAllPVZWithReceptions.GetAllPVZWithReceptionsMock.defaultExpectation.expectationOrigins.originPage, *mm_want_ptrs.page, mm_got.page, minimock.Diff(*mm_want_ptrs.page, mm_got.page))
			}

			if mm_want_ptrs.limit != nil && !minimock.Equal(*mm_want_ptrs.limit, mm_got.limit) {
				mmGetAllPVZWithReceptions.t.Errorf("PVZServiceMock.GetAllPVZWithReceptions got unexpected parameter limit, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAllPVZWithReceptions.GetAllPVZWithReceptionsMock.defaultExpectation.expectationOrigins.originLimit, *mm_want_ptrs.limit, mm_got.limit, minimock.Diff(*mm_want_ptrs.limit, mm_got.limit))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetAllPVZWithReceptions.t.Errorf("PVZServiceMock.GetAllPVZWithReceptions got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetAllPVZWithReceptions.GetAllPVZWithReceptionsMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetAllPVZWithReceptions.GetAllPVZWithReceptionsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetAllPVZWithReceptions.t.Fatal("No results are set for the PVZServiceMock.GetAllPVZWithReceptions")
		}
		return (*mm_results).ppa1, (*mm_results).err
	}
	if mmGetAllPVZWithReceptions.funcGetAllPVZWithReceptions != nil {
		return mmGetAllPVZWithReceptions.funcGetAllPVZWithReceptions(ctx, startDate, endDate, page, limit)
	}
	mmGetAllPVZWithReceptions.t.Fatalf("Unexpected call to PVZServiceMock.GetAllPVZWithReceptions. %v %v %v %v %v", ctx, startDate, endDate, page, limit)
	return
}

// GetAllPVZWithReceptionsAfterCounter returns a count of finished PVZServiceMock.GetAllPVZWithReceptions invocations
func (mmGetAllPVZWithReceptions *PVZServiceMock) GetAllPVZWithReceptionsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAllPVZWithReceptions.afterGetAllPVZWithReceptionsCounter)
}

// GetAllPVZWithReceptionsBeforeCounter returns a count of PVZServiceMock.GetAllPVZWithReceptions invocations
func (mmGetAllPVZWithReceptions *PVZServiceMock) GetAllPVZWithReceptionsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAllPVZWithReceptions.beforeGetAllPVZWithReceptionsCounter)
}

// Calls returns a list of arguments used in each call to PVZServiceMock.GetAllPVZWithReceptions.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetAllPVZWithReceptions *mPVZServiceMockGetAllPVZWithReceptions) Calls() []*PVZServiceMockGetAllPVZWithReceptionsParams {
	mmGetAllPVZWithReceptions.mutex.RLock()

	argCopy := make([]*PVZServiceMockGetAllPVZWithReceptionsParams, len(mmGetAllPVZWithReceptions.callArgs))
	copy(argCopy, mmGetAllPVZWithReceptions.callArgs)

	mmGetAllPVZWithReceptions.mutex.RUnlock()

	return argCopy
}

// MinimockGetAllPVZWithReceptionsDone returns true if the count of the GetAllPVZWithReceptions invocations corresponds
// the number of defined expectations
func (m *PVZServiceMock) MinimockGetAllPVZWithReceptionsDone() bool {
	if m.GetAllPVZWithReceptionsMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetAllPVZWithReceptionsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetAllPVZWithReceptionsMock.invocationsDone()
}

// MinimockGetAllPVZWithReceptionsInspect logs each unmet expectation
func (m *PVZServiceMock) MinimockGetAllPVZWithReceptionsInspect() {
	for _, e := range m.GetAllPVZWithReceptionsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PVZServiceMock.GetAllPVZWithReceptions at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetAllPVZWithReceptionsCounter := mm_atomic.LoadUint64(&m.afterGetAllPVZWithReceptionsCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetAllPVZWithReceptionsMock.defaultExpectation != nil && afterGetAllPVZWithReceptionsCounter < 1 {
		if m.GetAllPVZWithReceptionsMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to PVZServiceMock.GetAllPVZWithReceptions at\n%s", m.GetAllPVZWithReceptionsMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to PVZServiceMock.GetAllPVZWithReceptions at\n%s with params: %#v", m.GetAllPVZWithReceptionsMock.defaultExpectation.expectationOrigins.origin, *m.GetAllPVZWithReceptionsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAllPVZWithReceptions != nil && afterGetAllPVZWithReceptionsCounter < 1 {
		m.t.Errorf("Expected call to PVZServiceMock.GetAllPVZWithReceptions at\n%s", m.funcGetAllPVZWithReceptionsOrigin)
	}

	if !m.GetAllPVZWithReceptionsMock.invocationsDone() && afterGetAllPVZWithReceptionsCounter > 0 {
		m.t.Errorf("Expected %d calls to PVZServiceMock.GetAllPVZWithReceptions at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetAllPVZWithReceptionsMock.expectedInvocations), m.GetAllPVZWithReceptionsMock.expectedInvocationsOrigin, afterGetAllPVZWithReceptionsCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PVZServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreatePVZInspect()

			m.MinimockGetAllPVZWithReceptionsInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PVZServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PVZServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreatePVZDone() &&
		m.MinimockGetAllPVZWithReceptionsDone()
}
