// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i PVZ/internal/repository.PVZRepository -o pvz_repository_minimock.go -n PVZRepositoryMock -p mocks

import (
	"PVZ/internal/model"
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// PVZRepositoryMock implements mm_repository.PVZRepository
type PVZRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreate          func(ctx context.Context, pvz *model.PVZ) (err error)
	funcCreateOrigin    string
	inspectFuncCreate   func(ctx context.Context, pvz *model.PVZ)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mPVZRepositoryMockCreate

	funcGetAll          func(ctx context.Context) (ppa1 []*model.PVZ, err error)
	funcGetAllOrigin    string
	inspectFuncGetAll   func(ctx context.Context)
	afterGetAllCounter  uint64
	beforeGetAllCounter uint64
	GetAllMock          mPVZRepositoryMockGetAll
}

// NewPVZRepositoryMock returns a mock for mm_repository.PVZRepository
func NewPVZRepositoryMock(t minimock.Tester) *PVZRepositoryMock {
	m := &PVZRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mPVZRepositoryMockCreate{mock: m}
	m.CreateMock.callArgs = []*PVZRepositoryMockCreateParams{}

	m.GetAllMock = mPVZRepositoryMockGetAll{mock: m}
	m.GetAllMock.callArgs = []*PVZRepositoryMockGetAllParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mPVZRepositoryMockCreate struct {
	optional           bool
	mock               *PVZRepositoryMock
	defaultExpectation *PVZRepositoryMockCreateExpectation
	expectations       []*PVZRepositoryMockCreateExpectation

	callArgs []*PVZRepositoryMockCreateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// PVZRepositoryMockCreateExpectation specifies expectation struct of the PVZRepository.Create
type PVZRepositoryMockCreateExpectation struct {
	mock               *PVZRepositoryMock
	params             *PVZRepositoryMockCreateParams
	paramPtrs          *PVZRepositoryMockCreateParamPtrs
	expectationOrigins PVZRepositoryMockCreateExpectationOrigins
	results            *PVZRepositoryMockCreateResults
	returnOrigin       string
	Counter            uint64
}

// PVZRepositoryMockCreateParams contains parameters of the PVZRepository.Create
type PVZRepositoryMockCreateParams struct {
	ctx context.Context
	pvz *model.PVZ
}

// PVZRepositoryMockCreateParamPtrs contains pointers to parameters of the PVZRepository.Create
type PVZRepositoryMockCreateParamPtrs struct {
	ctx *context.Context
	pvz **model.PVZ
}

// PVZRepositoryMockCreateResults contains results of the PVZRepository.Create
type PVZRepositoryMockCreateResults struct {
	err error
}

// PVZRepositoryMockCreateOrigins contains origins of expectations of the PVZRepository.Create
type PVZRepositoryMockCreateExpectationOrigins struct {
	origin    string
	originCtx string
	originPvz string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreate *mPVZRepositoryMockCreate) Optional() *mPVZRepositoryMockCreate {
	mmCreate.optional = true
	return mmCreate
}

// Expect sets up expected params for PVZRepository.Create
func (mmCreate *mPVZRepositoryMockCreate) Expect(ctx context.Context, pvz *model.PVZ) *mPVZRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("PVZRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &PVZRepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.paramPtrs != nil {
		mmCreate.mock.t.Fatalf("PVZRepositoryMock.Create mock is already set by ExpectParams functions")
	}

	mmCreate.defaultExpectation.params = &PVZRepositoryMockCreateParams{ctx, pvz}
	mmCreate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// ExpectCtxParam1 sets up expected param ctx for PVZRepository.Create
func (mmCreate *mPVZRepositoryMockCreate) ExpectCtxParam1(ctx context.Context) *mPVZRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("PVZRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &PVZRepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("PVZRepositoryMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &PVZRepositoryMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreate.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreate
}

// ExpectPvzParam2 sets up expected param pvz for PVZRepository.Create
func (mmCreate *mPVZRepositoryMockCreate) ExpectPvzParam2(pvz *model.PVZ) *mPVZRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("PVZRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &PVZRepositoryMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("PVZRepositoryMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &PVZRepositoryMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.pvz = &pvz
	mmCreate.defaultExpectation.expectationOrigins.originPvz = minimock.CallerInfo(1)

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the PVZRepository.Create
func (mmCreate *mPVZRepositoryMockCreate) Inspect(f func(ctx context.Context, pvz *model.PVZ)) *mPVZRepositoryMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for PVZRepositoryMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by PVZRepository.Create
func (mmCreate *mPVZRepositoryMockCreate) Return(err error) *PVZRepositoryMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("PVZRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &PVZRepositoryMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &PVZRepositoryMockCreateResults{err}
	mmCreate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreate.mock
}

// Set uses given function f to mock the PVZRepository.Create method
func (mmCreate *mPVZRepositoryMockCreate) Set(f func(ctx context.Context, pvz *model.PVZ) (err error)) *PVZRepositoryMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the PVZRepository.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the PVZRepository.Create method")
	}

	mmCreate.mock.funcCreate = f
	mmCreate.mock.funcCreateOrigin = minimock.CallerInfo(1)
	return mmCreate.mock
}

// When sets expectation for the PVZRepository.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mPVZRepositoryMockCreate) When(ctx context.Context, pvz *model.PVZ) *PVZRepositoryMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("PVZRepositoryMock.Create mock is already set by Set")
	}

	expectation := &PVZRepositoryMockCreateExpectation{
		mock:               mmCreate.mock,
		params:             &PVZRepositoryMockCreateParams{ctx, pvz},
		expectationOrigins: PVZRepositoryMockCreateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up PVZRepository.Create return parameters for the expectation previously defined by the When method
func (e *PVZRepositoryMockCreateExpectation) Then(err error) *PVZRepositoryMock {
	e.results = &PVZRepositoryMockCreateResults{err}
	return e.mock
}

// Times sets number of times PVZRepository.Create should be invoked
func (mmCreate *mPVZRepositoryMockCreate) Times(n uint64) *mPVZRepositoryMockCreate {
	if n == 0 {
		mmCreate.mock.t.Fatalf("Times of PVZRepositoryMock.Create mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreate.expectedInvocations, n)
	mmCreate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreate
}

func (mmCreate *mPVZRepositoryMockCreate) invocationsDone() bool {
	if len(mmCreate.expectations) == 0 && mmCreate.defaultExpectation == nil && mmCreate.mock.funcCreate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreate.mock.afterCreateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Create implements mm_repository.PVZRepository
func (mmCreate *PVZRepositoryMock) Create(ctx context.Context, pvz *model.PVZ) (err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	mmCreate.t.Helper()

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, pvz)
	}

	mm_params := PVZRepositoryMockCreateParams{ctx, pvz}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, &mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_want_ptrs := mmCreate.CreateMock.defaultExpectation.paramPtrs

		mm_got := PVZRepositoryMockCreateParams{ctx, pvz}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreate.t.Errorf("PVZRepositoryMock.Create got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.pvz != nil && !minimock.Equal(*mm_want_ptrs.pvz, mm_got.pvz) {
				mmCreate.t.Errorf("PVZRepositoryMock.Create got unexpected parameter pvz, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originPvz, *mm_want_ptrs.pvz, mm_got.pvz, minimock.Diff(*mm_want_ptrs.pvz, mm_got.pvz))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("PVZRepositoryMock.Create got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreate.CreateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the PVZRepositoryMock.Create")
		}
		return (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, pvz)
	}
	mmCreate.t.Fatalf("Unexpected call to PVZRepositoryMock.Create. %v %v", ctx, pvz)
	return
}

// CreateAfterCounter returns a count of finished PVZRepositoryMock.Create invocations
func (mmCreate *PVZRepositoryMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of PVZRepositoryMock.Create invocations
func (mmCreate *PVZRepositoryMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to PVZRepositoryMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mPVZRepositoryMockCreate) Calls() []*PVZRepositoryMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*PVZRepositoryMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *PVZRepositoryMock) MinimockCreateDone() bool {
	if m.CreateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateMock.invocationsDone()
}

// MinimockCreateInspect logs each unmet expectation
func (m *PVZRepositoryMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PVZRepositoryMock.Create at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateCounter := mm_atomic.LoadUint64(&m.afterCreateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && afterCreateCounter < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to PVZRepositoryMock.Create at\n%s", m.CreateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to PVZRepositoryMock.Create at\n%s with params: %#v", m.CreateMock.defaultExpectation.expectationOrigins.origin, *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && afterCreateCounter < 1 {
		m.t.Errorf("Expected call to PVZRepositoryMock.Create at\n%s", m.funcCreateOrigin)
	}

	if !m.CreateMock.invocationsDone() && afterCreateCounter > 0 {
		m.t.Errorf("Expected %d calls to PVZRepositoryMock.Create at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateMock.expectedInvocations), m.CreateMock.expectedInvocationsOrigin, afterCreateCounter)
	}
}

type mPVZRepositoryMockGetAll struct {
	optional           bool
	mock               *PVZRepositoryMock
	defaultExpectation *PVZRepositoryMockGetAllExpectation
	expectations       []*PVZRepositoryMockGetAllExpectation

	callArgs []*PVZRepositoryMockGetAllParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// PVZRepositoryMockGetAllExpectation specifies expectation struct of the PVZRepository.GetAll
type PVZRepositoryMockGetAllExpectation struct {
	mock               *PVZRepositoryMock
	params             *PVZRepositoryMockGetAllParams
	paramPtrs          *PVZRepositoryMockGetAllParamPtrs
	expectationOrigins PVZRepositoryMockGetAllExpectationOrigins
	results            *PVZRepositoryMockGetAllResults
	returnOrigin       string
	Counter            uint64
}

// PVZRepositoryMockGetAllParams contains parameters of the PVZRepository.GetAll
type PVZRepositoryMockGetAllParams struct {
	ctx context.Context
}

// PVZRepositoryMockGetAllParamPtrs contains pointers to parameters of the PVZRepository.GetAll
type PVZRepositoryMockGetAllParamPtrs struct {
	ctx *context.Context
}

// PVZRepositoryMockGetAllResults contains results of the PVZRepository.GetAll
type PVZRepositoryMockGetAllResults struct {
	ppa1 []*model.PVZ
	err  error
}

// PVZRepositoryMockGetAllOrigins contains origins of expectations of the PVZRepository.GetAll
type PVZRepositoryMockGetAllExpectationOrigins struct {
	origin    string
	originCtx string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetAll *mPVZRepositoryMockGetAll) Optional() *mPVZRepositoryMockGetAll {
	mmGetAll.optional = true
	return mmGetAll
}

// Expect sets up expected params for PVZRepository.GetAll
func (mmGetAll *mPVZRepositoryMockGetAll) Expect(ctx context.Context) *mPVZRepositoryMockGetAll {
	if mmGetAll.mock.funcGetAll != nil {
		mmGetAll.mock.t.Fatalf("PVZRepositoryMock.GetAll mock is already set by Set")
	}

	if mmGetAll.defaultExpectation == nil {
		mmGetAll.defaultExpectation = &PVZRepositoryMockGetAllExpectation{}
	}

	if mmGetAll.defaultExpectation.paramPtrs != nil {
		mmGetAll.mock.t.Fatalf("PVZRepositoryMock.GetAll mock is already set by ExpectParams functions")
	}

	mmGetAll.defaultExpectation.params = &PVZRepositoryMockGetAllParams{ctx}
	mmGetAll.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetAll.expectations {
		if minimock.Equal(e.params, mmGetAll.defaultExpectation.params) {
			mmGetAll.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetAll.defaultExpectation.params)
		}
	}

	return mmGetAll
}

// ExpectCtxParam1 sets up expected param ctx for PVZRepository.GetAll
func (mmGetAll *mPVZRepositoryMockGetAll) ExpectCtxParam1(ctx context.Context) *mPVZRepositoryMockGetAll {
	if mmGetAll.mock.funcGetAll != nil {
		mmGetAll.mock.t.Fatalf("PVZRepositoryMock.GetAll mock is already set by Set")
	}

	if mmGetAll.defaultExpectation == nil {
		mmGetAll.defaultExpectation = &PVZRepositoryMockGetAllExpectation{}
	}

	if mmGetAll.defaultExpectation.params != nil {
		mmGetAll.mock.t.Fatalf("PVZRepositoryMock.GetAll mock is already set by Expect")
	}

	if mmGetAll.defaultExpectation.paramPtrs == nil {
		mmGetAll.defaultExpectation.paramPtrs = &PVZRepositoryMockGetAllParamPtrs{}
	}
	mmGetAll.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetAll.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetAll
}

// Inspect accepts an inspector function that has same arguments as the PVZRepository.GetAll
func (mmGetAll *mPVZRepositoryMockGetAll) Inspect(f func(ctx context.Context)) *mPVZRepositoryMockGetAll {
	if mmGetAll.mock.inspectFuncGetAll != nil {
		mmGetAll.mock.t.Fatalf("Inspect function is already set for PVZRepositoryMock.GetAll")
	}

	mmGetAll.mock.inspectFuncGetAll = f

	return mmGetAll
}

// Return sets up results that will be returned by PVZRepository.GetAll
func (mmGetAll *mPVZRepositoryMockGetAll) Return(ppa1 []*model.PVZ, err error) *PVZRepositoryMock {
	if mmGetAll.mock.funcGetAll != nil {
		mmGetAll.mock.t.Fatalf("PVZRepositoryMock.GetAll mock is already set by Set")
	}

	if mmGetAll.defaultExpectation == nil {
		mmGetAll.defaultExpectation = &PVZRepositoryMockGetAllExpectation{mock: mmGetAll.mock}
	}
	mmGetAll.defaultExpectation.results = &PVZRepositoryMockGetAllResults{ppa1, err}
	mmGetAll.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetAll.mock
}

// Set uses given function f to mock the PVZRepository.GetAll method
func (mmGetAll *mPVZRepositoryMockGetAll) Set(f func(ctx context.Context) (ppa1 []*model.PVZ, err error)) *PVZRepositoryMock {
	if mmGetAll.defaultExpectation != nil {
		mmGetAll.mock.t.Fatalf("Default expectation is already set for the PVZRepository.GetAll method")
	}

	if len(mmGetAll.expectations) > 0 {
		mmGetAll.mock.t.Fatalf("Some expectations are already set for the PVZRepository.GetAll method")
	}

	mmGetAll.mock.funcGetAll = f
	mmGetAll.mock.funcGetAllOrigin = minimock.CallerInfo(1)
	return mmGetAll.mock
}

// When sets expectation for the PVZRepository.GetAll which will trigger the result defined by the following
// Then helper
func (mmGetAll *mPVZRepositoryMockGetAll) When(ctx context.Context) *PVZRepositoryMockGetAllExpectation {
	if mmGetAll.mock.funcGetAll != nil {
		mmGetAll.mock.t.Fatalf("PVZRepositoryMock.GetAll mock is already set by Set")
	}

	expectation := &PVZRepositoryMockGetAllExpectation{
		mock:               mmGetAll.mock,
		params:             &PVZRepositoryMockGetAllParams{ctx},
		expectationOrigins: PVZRepositoryMockGetAllExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetAll.expectations = append(mmGetAll.expectations, expectation)
	return expectation
}

// Then sets up PVZRepository.GetAll return parameters for the expectation previously defined by the When method
func (e *PVZRepositoryMockGetAllExpectation) Then(ppa1 []*model.PVZ, err error) *PVZRepositoryMock {
	e.results = &PVZRepositoryMockGetAllResults{ppa1, err}
	return e.mock
}

// Times sets number of times PVZRepository.GetAll should be invoked
func (mmGetAll *mPVZRepositoryMockGetAll) Times(n uint64) *mPVZRepositoryMockGetAll {
	if n == 0 {
		mmGetAll.mock.t.Fatalf("Times of PVZRepositoryMock.GetAll mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetAll.expectedInvocations, n)
	mmGetAll.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetAll
}

func (mmGetAll *mPVZRepositoryMockGetAll) invocationsDone() bool {
	if len(mmGetAll.expectations) == 0 && mmGetAll.defaultExpectation == nil && mmGetAll.mock.funcGetAll == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetAll.mock.afterGetAllCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetAll.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetAll implements mm_repository.PVZRepository
func (mmGetAll *PVZRepositoryMock) GetAll(ctx context.Context) (ppa1 []*model.PVZ, err error) {
	mm_atomic.AddUint64(&mmGetAll.beforeGetAllCounter, 1)
	defer mm_atomic.AddUint64(&mmGetAll.afterGetAllCounter, 1)

	mmGetAll.t.Helper()

	if mmGetAll.inspectFuncGetAll != nil {
		mmGetAll.inspectFuncGetAll(ctx)
	}

	mm_params := PVZRepositoryMockGetAllParams{ctx}

	// Record call args
	mmGetAll.GetAllMock.mutex.Lock()
	mmGetAll.GetAllMock.callArgs = append(mmGetAll.GetAllMock.callArgs, &mm_params)
	mmGetAll.GetAllMock.mutex.Unlock()

	for _, e := range mmGetAll.GetAllMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ppa1, e.results.err
		}
	}

	if mmGetAll.GetAllMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetAll.GetAllMock.defaultExpectation.Counter, 1)
		mm_want := mmGetAll.GetAllMock.defaultExpectation.params
		mm_want_ptrs := mmGetAll.GetAllMock.defaultExpectation.paramPtrs

		mm_got := PVZRepositoryMockGetAllParams{ctx}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetAll.t.Errorf("PVZRepositoryMock.GetAll got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetAll.GetAllMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetAll.t.Errorf("PVZRepositoryMock.GetAll got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetAll.GetAllMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetAll.GetAllMock.defaultExpectation.results
		if mm_results == nil {
			mmGetAll.t.Fatal("No results are set for the PVZRepositoryMock.GetAll")
		}
		return (*mm_results).ppa1, (*mm_results).err
	}
	if mmGetAll.funcGetAll != nil {
		return mmGetAll.funcGetAll(ctx)
	}
	mmGetAll.t.Fatalf("Unexpected call to PVZRepositoryMock.GetAll. %v", ctx)
	return
}

// GetAllAfterCounter returns a count of finished PVZRepositoryMock.GetAll invocations
func (mmGetAll *PVZRepositoryMock) GetAllAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAll.afterGetAllCounter)
}

// GetAllBeforeCounter returns a count of PVZRepositoryMock.GetAll invocations
func (mmGetAll *PVZRepositoryMock) GetAllBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAll.beforeGetAllCounter)
}

// Calls returns a list of arguments used in each call to PVZRepositoryMock.GetAll.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetAll *mPVZRepositoryMockGetAll) Calls() []*PVZRepositoryMockGetAllParams {
	mmGetAll.mutex.RLock()

	argCopy := make([]*PVZRepositoryMockGetAllParams, len(mmGetAll.callArgs))
	copy(argCopy, mmGetAll.callArgs)

	mmGetAll.mutex.RUnlock()

	return argCopy
}

// MinimockGetAllDone returns true if the count of the GetAll invocations corresponds
// the number of defined expectations
func (m *PVZRepositoryMock) MinimockGetAllDone() bool {
	if m.GetAllMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetAllMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetAllMock.invocationsDone()
}

// MinimockGetAllInspect logs each unmet expectation
func (m *PVZRepositoryMock) MinimockGetAllInspect() {
	for _, e := range m.GetAllMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PVZRepositoryMock.GetAll at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetAllCounter := mm_atomic.LoadUint64(&m.afterGetAllCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetAllMock.defaultExpectation != nil && afterGetAllCounter < 1 {
		if m.GetAllMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to PVZRepositoryMock.GetAll at\n%s", m.GetAllMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to PVZRepositoryMock.GetAll at\n%s with params: %#v", m.GetAllMock.defaultExpectation.expectationOrigins.origin, *m.GetAllMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAll != nil && afterGetAllCounter < 1 {
		m.t.Errorf("Expected call to PVZRepositoryMock.GetAll at\n%s", m.funcGetAllOrigin)
	}

	if !m.GetAllMock.invocationsDone() && afterGetAllCounter > 0 {
		m.t.Errorf("Expected %d calls to PVZRepositoryMock.GetAll at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetAllMock.expectedInvocations), m.GetAllMock.expectedInvocationsOrigin, afterGetAllCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PVZRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateInspect()

			m.MinimockGetAllInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PVZRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PVZRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockGetAllDone()
}
