// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mocks

//go:generate minimock -i PVZ/internal/utils.TokenUtils -o token_utils_minimock.go -n TokenUtilsMock -p mocks

import (
	"PVZ/internal/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// TokenUtilsMock implements mm_utils.TokenUtils
type TokenUtilsMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGenerateToken          func(userType string) (s1 string, err error)
	funcGenerateTokenOrigin    string
	inspectFuncGenerateToken   func(userType string)
	afterGenerateTokenCounter  uint64
	beforeGenerateTokenCounter uint64
	GenerateTokenMock          mTokenUtilsMockGenerateToken

	funcValidateToken          func(tokenString string) (up1 *model.UserClaims, err error)
	funcValidateTokenOrigin    string
	inspectFuncValidateToken   func(tokenString string)
	afterValidateTokenCounter  uint64
	beforeValidateTokenCounter uint64
	ValidateTokenMock          mTokenUtilsMockValidateToken
}

// NewTokenUtilsMock returns a mock for mm_utils.TokenUtils
func NewTokenUtilsMock(t minimock.Tester) *TokenUtilsMock {
	m := &TokenUtilsMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GenerateTokenMock = mTokenUtilsMockGenerateToken{mock: m}
	m.GenerateTokenMock.callArgs = []*TokenUtilsMockGenerateTokenParams{}

	m.ValidateTokenMock = mTokenUtilsMockValidateToken{mock: m}
	m.ValidateTokenMock.callArgs = []*TokenUtilsMockValidateTokenParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mTokenUtilsMockGenerateToken struct {
	optional           bool
	mock               *TokenUtilsMock
	defaultExpectation *TokenUtilsMockGenerateTokenExpectation
	expectations       []*TokenUtilsMockGenerateTokenExpectation

	callArgs []*TokenUtilsMockGenerateTokenParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// TokenUtilsMockGenerateTokenExpectation specifies expectation struct of the TokenUtils.GenerateToken
type TokenUtilsMockGenerateTokenExpectation struct {
	mock               *TokenUtilsMock
	params             *TokenUtilsMockGenerateTokenParams
	paramPtrs          *TokenUtilsMockGenerateTokenParamPtrs
	expectationOrigins TokenUtilsMockGenerateTokenExpectationOrigins
	results            *TokenUtilsMockGenerateTokenResults
	returnOrigin       string
	Counter            uint64
}

// TokenUtilsMockGenerateTokenParams contains parameters of the TokenUtils.GenerateToken
type TokenUtilsMockGenerateTokenParams struct {
	userType string
}

// TokenUtilsMockGenerateTokenParamPtrs contains pointers to parameters of the TokenUtils.GenerateToken
type TokenUtilsMockGenerateTokenParamPtrs struct {
	userType *string
}

// TokenUtilsMockGenerateTokenResults contains results of the TokenUtils.GenerateToken
type TokenUtilsMockGenerateTokenResults struct {
	s1  string
	err error
}

// TokenUtilsMockGenerateTokenOrigins contains origins of expectations of the TokenUtils.GenerateToken
type TokenUtilsMockGenerateTokenExpectationOrigins struct {
	origin         string
	originUserType string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGenerateToken *mTokenUtilsMockGenerateToken) Optional() *mTokenUtilsMockGenerateToken {
	mmGenerateToken.optional = true
	return mmGenerateToken
}

// Expect sets up expected params for TokenUtils.GenerateToken
func (mmGenerateToken *mTokenUtilsMockGenerateToken) Expect(userType string) *mTokenUtilsMockGenerateToken {
	if mmGenerateToken.mock.funcGenerateToken != nil {
		mmGenerateToken.mock.t.Fatalf("TokenUtilsMock.GenerateToken mock is already set by Set")
	}

	if mmGenerateToken.defaultExpectation == nil {
		mmGenerateToken.defaultExpectation = &TokenUtilsMockGenerateTokenExpectation{}
	}

	if mmGenerateToken.defaultExpectation.paramPtrs != nil {
		mmGenerateToken.mock.t.Fatalf("TokenUtilsMock.GenerateToken mock is already set by ExpectParams functions")
	}

	mmGenerateToken.defaultExpectation.params = &TokenUtilsMockGenerateTokenParams{userType}
	mmGenerateToken.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGenerateToken.expectations {
		if minimock.Equal(e.params, mmGenerateToken.defaultExpectation.params) {
			mmGenerateToken.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGenerateToken.defaultExpectation.params)
		}
	}

	return mmGenerateToken
}

// ExpectUserTypeParam1 sets up expected param userType for TokenUtils.GenerateToken
func (mmGenerateToken *mTokenUtilsMockGenerateToken) ExpectUserTypeParam1(userType string) *mTokenUtilsMockGenerateToken {
	if mmGenerateToken.mock.funcGenerateToken != nil {
		mmGenerateToken.mock.t.Fatalf("TokenUtilsMock.GenerateToken mock is already set by Set")
	}

	if mmGenerateToken.defaultExpectation == nil {
		mmGenerateToken.defaultExpectation = &TokenUtilsMockGenerateTokenExpectation{}
	}

	if mmGenerateToken.defaultExpectation.params != nil {
		mmGenerateToken.mock.t.Fatalf("TokenUtilsMock.GenerateToken mock is already set by Expect")
	}

	if mmGenerateToken.defaultExpectation.paramPtrs == nil {
		mmGenerateToken.defaultExpectation.paramPtrs = &TokenUtilsMockGenerateTokenParamPtrs{}
	}
	mmGenerateToken.defaultExpectation.paramPtrs.userType = &userType
	mmGenerateToken.defaultExpectation.expectationOrigins.originUserType = minimock.CallerInfo(1)

	return mmGenerateToken
}

// Inspect accepts an inspector function that has same arguments as the TokenUtils.GenerateToken
func (mmGenerateToken *mTokenUtilsMockGenerateToken) Inspect(f func(userType string)) *mTokenUtilsMockGenerateToken {
	if mmGenerateToken.mock.inspectFuncGenerateToken != nil {
		mmGenerateToken.mock.t.Fatalf("Inspect function is already set for TokenUtilsMock.GenerateToken")
	}

	mmGenerateToken.mock.inspectFuncGenerateToken = f

	return mmGenerateToken
}

// Return sets up results that will be returned by TokenUtils.GenerateToken
func (mmGenerateToken *mTokenUtilsMockGenerateToken) Return(s1 string, err error) *TokenUtilsMock {
	if mmGenerateToken.mock.funcGenerateToken != nil {
		mmGenerateToken.mock.t.Fatalf("TokenUtilsMock.GenerateToken mock is already set by Set")
	}

	if mmGenerateToken.defaultExpectation == nil {
		mmGenerateToken.defaultExpectation = &TokenUtilsMockGenerateTokenExpectation{mock: mmGenerateToken.mock}
	}
	mmGenerateToken.defaultExpectation.results = &TokenUtilsMockGenerateTokenResults{s1, err}
	mmGenerateToken.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGenerateToken.mock
}

// Set uses given function f to mock the TokenUtils.GenerateToken method
func (mmGenerateToken *mTokenUtilsMockGenerateToken) Set(f func(userType string) (s1 string, err error)) *TokenUtilsMock {
	if mmGenerateToken.defaultExpectation != nil {
		mmGenerateToken.mock.t.Fatalf("Default expectation is already set for the TokenUtils.GenerateToken method")
	}

	if len(mmGenerateToken.expectations) > 0 {
		mmGenerateToken.mock.t.Fatalf("Some expectations are already set for the TokenUtils.GenerateToken method")
	}

	mmGenerateToken.mock.funcGenerateToken = f
	mmGenerateToken.mock.funcGenerateTokenOrigin = minimock.CallerInfo(1)
	return mmGenerateToken.mock
}

// When sets expectation for the TokenUtils.GenerateToken which will trigger the result defined by the following
// Then helper
func (mmGenerateToken *mTokenUtilsMockGenerateToken) When(userType string) *TokenUtilsMockGenerateTokenExpectation {
	if mmGenerateToken.mock.funcGenerateToken != nil {
		mmGenerateToken.mock.t.Fatalf("TokenUtilsMock.GenerateToken mock is already set by Set")
	}

	expectation := &TokenUtilsMockGenerateTokenExpectation{
		mock:               mmGenerateToken.mock,
		params:             &TokenUtilsMockGenerateTokenParams{userType},
		expectationOrigins: TokenUtilsMockGenerateTokenExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGenerateToken.expectations = append(mmGenerateToken.expectations, expectation)
	return expectation
}

// Then sets up TokenUtils.GenerateToken return parameters for the expectation previously defined by the When method
func (e *TokenUtilsMockGenerateTokenExpectation) Then(s1 string, err error) *TokenUtilsMock {
	e.results = &TokenUtilsMockGenerateTokenResults{s1, err}
	return e.mock
}

// Times sets number of times TokenUtils.GenerateToken should be invoked
func (mmGenerateToken *mTokenUtilsMockGenerateToken) Times(n uint64) *mTokenUtilsMockGenerateToken {
	if n == 0 {
		mmGenerateToken.mock.t.Fatalf("Times of TokenUtilsMock.GenerateToken mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGenerateToken.expectedInvocations, n)
	mmGenerateToken.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGenerateToken
}

func (mmGenerateToken *mTokenUtilsMockGenerateToken) invocationsDone() bool {
	if len(mmGenerateToken.expectations) == 0 && mmGenerateToken.defaultExpectation == nil && mmGenerateToken.mock.funcGenerateToken == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGenerateToken.mock.afterGenerateTokenCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGenerateToken.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GenerateToken implements mm_utils.TokenUtils
func (mmGenerateToken *TokenUtilsMock) GenerateToken(userType string) (s1 string, err error) {
	mm_atomic.AddUint64(&mmGenerateToken.beforeGenerateTokenCounter, 1)
	defer mm_atomic.AddUint64(&mmGenerateToken.afterGenerateTokenCounter, 1)

	mmGenerateToken.t.Helper()

	if mmGenerateToken.inspectFuncGenerateToken != nil {
		mmGenerateToken.inspectFuncGenerateToken(userType)
	}

	mm_params := TokenUtilsMockGenerateTokenParams{userType}

	// Record call args
	mmGenerateToken.GenerateTokenMock.mutex.Lock()
	mmGenerateToken.GenerateTokenMock.callArgs = append(mmGenerateToken.GenerateTokenMock.callArgs, &mm_params)
	mmGenerateToken.GenerateTokenMock.mutex.Unlock()

	for _, e := range mmGenerateToken.GenerateTokenMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmGenerateToken.GenerateTokenMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGenerateToken.GenerateTokenMock.defaultExpectation.Counter, 1)
		mm_want := mmGenerateToken.GenerateTokenMock.defaultExpectation.params
		mm_want_ptrs := mmGenerateToken.GenerateTokenMock.defaultExpectation.paramPtrs

		mm_got := TokenUtilsMockGenerateTokenParams{userType}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.userType != nil && !minimock.Equal(*mm_want_ptrs.userType, mm_got.userType) {
				mmGenerateToken.t.Errorf("TokenUtilsMock.GenerateToken got unexpected parameter userType, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGenerateToken.GenerateTokenMock.defaultExpectation.expectationOrigins.originUserType, *mm_want_ptrs.userType, mm_got.userType, minimock.Diff(*mm_want_ptrs.userType, mm_got.userType))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGenerateToken.t.Errorf("TokenUtilsMock.GenerateToken got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGenerateToken.GenerateTokenMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGenerateToken.GenerateTokenMock.defaultExpectation.results
		if mm_results == nil {
			mmGenerateToken.t.Fatal("No results are set for the TokenUtilsMock.GenerateToken")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmGenerateToken.funcGenerateToken != nil {
		return mmGenerateToken.funcGenerateToken(userType)
	}
	mmGenerateToken.t.Fatalf("Unexpected call to TokenUtilsMock.GenerateToken. %v", userType)
	return
}

// GenerateTokenAfterCounter returns a count of finished TokenUtilsMock.GenerateToken invocations
func (mmGenerateToken *TokenUtilsMock) GenerateTokenAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerateToken.afterGenerateTokenCounter)
}

// GenerateTokenBeforeCounter returns a count of TokenUtilsMock.GenerateToken invocations
func (mmGenerateToken *TokenUtilsMock) GenerateTokenBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerateToken.beforeGenerateTokenCounter)
}

// Calls returns a list of arguments used in each call to TokenUtilsMock.GenerateToken.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGenerateToken *mTokenUtilsMockGenerateToken) Calls() []*TokenUtilsMockGenerateTokenParams {
	mmGenerateToken.mutex.RLock()

	argCopy := make([]*TokenUtilsMockGenerateTokenParams, len(mmGenerateToken.callArgs))
	copy(argCopy, mmGenerateToken.callArgs)

	mmGenerateToken.mutex.RUnlock()

	return argCopy
}

// MinimockGenerateTokenDone returns true if the count of the GenerateToken invocations corresponds
// the number of defined expectations
func (m *TokenUtilsMock) MinimockGenerateTokenDone() bool {
	if m.GenerateTokenMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GenerateTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GenerateTokenMock.invocationsDone()
}

// MinimockGenerateTokenInspect logs each unmet expectation
func (m *TokenUtilsMock) MinimockGenerateTokenInspect() {
	for _, e := range m.GenerateTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TokenUtilsMock.GenerateToken at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGenerateTokenCounter := mm_atomic.LoadUint64(&m.afterGenerateTokenCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GenerateTokenMock.defaultExpectation != nil && afterGenerateTokenCounter < 1 {
		if m.GenerateTokenMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to TokenUtilsMock.GenerateToken at\n%s", m.GenerateTokenMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to TokenUtilsMock.GenerateToken at\n%s with params: %#v", m.GenerateTokenMock.defaultExpectation.expectationOrigins.origin, *m.GenerateTokenMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGenerateToken != nil && afterGenerateTokenCounter < 1 {
		m.t.Errorf("Expected call to TokenUtilsMock.GenerateToken at\n%s", m.funcGenerateTokenOrigin)
	}

	if !m.GenerateTokenMock.invocationsDone() && afterGenerateTokenCounter > 0 {
		m.t.Errorf("Expected %d calls to TokenUtilsMock.GenerateToken at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GenerateTokenMock.expectedInvocations), m.GenerateTokenMock.expectedInvocationsOrigin, afterGenerateTokenCounter)
	}
}

type mTokenUtilsMockValidateToken struct {
	optional           bool
	mock               *TokenUtilsMock
	defaultExpectation *TokenUtilsMockValidateTokenExpectation
	expectations       []*TokenUtilsMockValidateTokenExpectation

	callArgs []*TokenUtilsMockValidateTokenParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// TokenUtilsMockValidateTokenExpectation specifies expectation struct of the TokenUtils.ValidateToken
type TokenUtilsMockValidateTokenExpectation struct {
	mock               *TokenUtilsMock
	params             *TokenUtilsMockValidateTokenParams
	paramPtrs          *TokenUtilsMockValidateTokenParamPtrs
	expectationOrigins TokenUtilsMockValidateTokenExpectationOrigins
	results            *TokenUtilsMockValidateTokenResults
	returnOrigin       string
	Counter            uint64
}

// TokenUtilsMockValidateTokenParams contains parameters of the TokenUtils.ValidateToken
type TokenUtilsMockValidateTokenParams struct {
	tokenString string
}

// TokenUtilsMockValidateTokenParamPtrs contains pointers to parameters of the TokenUtils.ValidateToken
type TokenUtilsMockValidateTokenParamPtrs struct {
	tokenString *string
}

// TokenUtilsMockValidateTokenResults contains results of the TokenUtils.ValidateToken
type TokenUtilsMockValidateTokenResults struct {
	up1 *model.UserClaims
	err error
}

// TokenUtilsMockValidateTokenOrigins contains origins of expectations of the TokenUtils.ValidateToken
type TokenUtilsMockValidateTokenExpectationOrigins struct {
	origin            string
	originTokenString string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmValidateToken *mTokenUtilsMockValidateToken) Optional() *mTokenUtilsMockValidateToken {
	mmValidateToken.optional = true
	return mmValidateToken
}

// Expect sets up expected params for TokenUtils.ValidateToken
func (mmValidateToken *mTokenUtilsMockValidateToken) Expect(tokenString string) *mTokenUtilsMockValidateToken {
	if mmValidateToken.mock.funcValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("TokenUtilsMock.ValidateToken mock is already set by Set")
	}

	if mmValidateToken.defaultExpectation == nil {
		mmValidateToken.defaultExpectation = &TokenUtilsMockValidateTokenExpectation{}
	}

	if mmValidateToken.defaultExpectation.paramPtrs != nil {
		mmValidateToken.mock.t.Fatalf("TokenUtilsMock.ValidateToken mock is already set by ExpectParams functions")
	}

	mmValidateToken.defaultExpectation.params = &TokenUtilsMockValidateTokenParams{tokenString}
	mmValidateToken.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmValidateToken.expectations {
		if minimock.Equal(e.params, mmValidateToken.defaultExpectation.params) {
			mmValidateToken.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmValidateToken.defaultExpectation.params)
		}
	}

	return mmValidateToken
}

// ExpectTokenStringParam1 sets up expected param tokenString for TokenUtils.ValidateToken
func (mmValidateToken *mTokenUtilsMockValidateToken) ExpectTokenStringParam1(tokenString string) *mTokenUtilsMockValidateToken {
	if mmValidateToken.mock.funcValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("TokenUtilsMock.ValidateToken mock is already set by Set")
	}

	if mmValidateToken.defaultExpectation == nil {
		mmValidateToken.defaultExpectation = &TokenUtilsMockValidateTokenExpectation{}
	}

	if mmValidateToken.defaultExpectation.params != nil {
		mmValidateToken.mock.t.Fatalf("TokenUtilsMock.ValidateToken mock is already set by Expect")
	}

	if mmValidateToken.defaultExpectation.paramPtrs == nil {
		mmValidateToken.defaultExpectation.paramPtrs = &TokenUtilsMockValidateTokenParamPtrs{}
	}
	mmValidateToken.defaultExpectation.paramPtrs.tokenString = &tokenString
	mmValidateToken.defaultExpectation.expectationOrigins.originTokenString = minimock.CallerInfo(1)

	return mmValidateToken
}

// Inspect accepts an inspector function that has same arguments as the TokenUtils.ValidateToken
func (mmValidateToken *mTokenUtilsMockValidateToken) Inspect(f func(tokenString string)) *mTokenUtilsMockValidateToken {
	if mmValidateToken.mock.inspectFuncValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("Inspect function is already set for TokenUtilsMock.ValidateToken")
	}

	mmValidateToken.mock.inspectFuncValidateToken = f

	return mmValidateToken
}

// Return sets up results that will be returned by TokenUtils.ValidateToken
func (mmValidateToken *mTokenUtilsMockValidateToken) Return(up1 *model.UserClaims, err error) *TokenUtilsMock {
	if mmValidateToken.mock.funcValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("TokenUtilsMock.ValidateToken mock is already set by Set")
	}

	if mmValidateToken.defaultExpectation == nil {
		mmValidateToken.defaultExpectation = &TokenUtilsMockValidateTokenExpectation{mock: mmValidateToken.mock}
	}
	mmValidateToken.defaultExpectation.results = &TokenUtilsMockValidateTokenResults{up1, err}
	mmValidateToken.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmValidateToken.mock
}

// Set uses given function f to mock the TokenUtils.ValidateToken method
func (mmValidateToken *mTokenUtilsMockValidateToken) Set(f func(tokenString string) (up1 *model.UserClaims, err error)) *TokenUtilsMock {
	if mmValidateToken.defaultExpectation != nil {
		mmValidateToken.mock.t.Fatalf("Default expectation is already set for the TokenUtils.ValidateToken method")
	}

	if len(mmValidateToken.expectations) > 0 {
		mmValidateToken.mock.t.Fatalf("Some expectations are already set for the TokenUtils.ValidateToken method")
	}

	mmValidateToken.mock.funcValidateToken = f
	mmValidateToken.mock.funcValidateTokenOrigin = minimock.CallerInfo(1)
	return mmValidateToken.mock
}

// When sets expectation for the TokenUtils.ValidateToken which will trigger the result defined by the following
// Then helper
func (mmValidateToken *mTokenUtilsMockValidateToken) When(tokenString string) *TokenUtilsMockValidateTokenExpectation {
	if mmValidateToken.mock.funcValidateToken != nil {
		mmValidateToken.mock.t.Fatalf("TokenUtilsMock.ValidateToken mock is already set by Set")
	}

	expectation := &TokenUtilsMockValidateTokenExpectation{
		mock:               mmValidateToken.mock,
		params:             &TokenUtilsMockValidateTokenParams{tokenString},
		expectationOrigins: TokenUtilsMockValidateTokenExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmValidateToken.expectations = append(mmValidateToken.expectations, expectation)
	return expectation
}

// Then sets up TokenUtils.ValidateToken return parameters for the expectation previously defined by the When method
func (e *TokenUtilsMockValidateTokenExpectation) Then(up1 *model.UserClaims, err error) *TokenUtilsMock {
	e.results = &TokenUtilsMockValidateTokenResults{up1, err}
	return e.mock
}

// Times sets number of times TokenUtils.ValidateToken should be invoked
func (mmValidateToken *mTokenUtilsMockValidateToken) Times(n uint64) *mTokenUtilsMockValidateToken {
	if n == 0 {
		mmValidateToken.mock.t.Fatalf("Times of TokenUtilsMock.ValidateToken mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmValidateToken.expectedInvocations, n)
	mmValidateToken.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmValidateToken
}

func (mmValidateToken *mTokenUtilsMockValidateToken) invocationsDone() bool {
	if len(mmValidateToken.expectations) == 0 && mmValidateToken.defaultExpectation == nil && mmValidateToken.mock.funcValidateToken == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmValidateToken.mock.afterValidateTokenCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmValidateToken.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ValidateToken implements mm_utils.TokenUtils
func (mmValidateToken *TokenUtilsMock) ValidateToken(tokenString string) (up1 *model.UserClaims, err error) {
	mm_atomic.AddUint64(&mmValidateToken.beforeValidateTokenCounter, 1)
	defer mm_atomic.AddUint64(&mmValidateToken.afterValidateTokenCounter, 1)

	mmValidateToken.t.Helper()

	if mmValidateToken.inspectFuncValidateToken != nil {
		mmValidateToken.inspectFuncValidateToken(tokenString)
	}

	mm_params := TokenUtilsMockValidateTokenParams{tokenString}

	// Record call args
	mmValidateToken.ValidateTokenMock.mutex.Lock()
	mmValidateToken.ValidateTokenMock.callArgs = append(mmValidateToken.ValidateTokenMock.callArgs, &mm_params)
	mmValidateToken.ValidateTokenMock.mutex.Unlock()

	for _, e := range mmValidateToken.ValidateTokenMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmValidateToken.ValidateTokenMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmValidateToken.ValidateTokenMock.defaultExpectation.Counter, 1)
		mm_want := mmValidateToken.ValidateTokenMock.defaultExpectation.params
		mm_want_ptrs := mmValidateToken.ValidateTokenMock.defaultExpectation.paramPtrs

		mm_got := TokenUtilsMockValidateTokenParams{tokenString}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.tokenString != nil && !minimock.Equal(*mm_want_ptrs.tokenString, mm_got.tokenString) {
				mmValidateToken.t.Errorf("TokenUtilsMock.ValidateToken got unexpected parameter tokenString, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmValidateToken.ValidateTokenMock.defaultExpectation.expectationOrigins.originTokenString, *mm_want_ptrs.tokenString, mm_got.tokenString, minimock.Diff(*mm_want_ptrs.tokenString, mm_got.tokenString))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmValidateToken.t.Errorf("TokenUtilsMock.ValidateToken got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmValidateToken.ValidateTokenMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmValidateToken.ValidateTokenMock.defaultExpectation.results
		if mm_results == nil {
			mmValidateToken.t.Fatal("No results are set for the TokenUtilsMock.ValidateToken")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmValidateToken.funcValidateToken != nil {
		return mmValidateToken.funcValidateToken(tokenString)
	}
	mmValidateToken.t.Fatalf("Unexpected call to TokenUtilsMock.ValidateToken. %v", tokenString)
	return
}

// ValidateTokenAfterCounter returns a count of finished TokenUtilsMock.ValidateToken invocations
func (mmValidateToken *TokenUtilsMock) ValidateTokenAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidateToken.afterValidateTokenCounter)
}

// ValidateTokenBeforeCounter returns a count of TokenUtilsMock.ValidateToken invocations
func (mmValidateToken *TokenUtilsMock) ValidateTokenBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmValidateToken.beforeValidateTokenCounter)
}

// Calls returns a list of arguments used in each call to TokenUtilsMock.ValidateToken.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmValidateToken *mTokenUtilsMockValidateToken) Calls() []*TokenUtilsMockValidateTokenParams {
	mmValidateToken.mutex.RLock()

	argCopy := make([]*TokenUtilsMockValidateTokenParams, len(mmValidateToken.callArgs))
	copy(argCopy, mmValidateToken.callArgs)

	mmValidateToken.mutex.RUnlock()

	return argCopy
}

// MinimockValidateTokenDone returns true if the count of the ValidateToken invocations corresponds
// the number of defined expectations
func (m *TokenUtilsMock) MinimockValidateTokenDone() bool {
	if m.ValidateTokenMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ValidateTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ValidateTokenMock.invocationsDone()
}

// MinimockValidateTokenInspect logs each unmet expectation
func (m *TokenUtilsMock) MinimockValidateTokenInspect() {
	for _, e := range m.ValidateTokenMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TokenUtilsMock.ValidateToken at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterValidateTokenCounter := mm_atomic.LoadUint64(&m.afterValidateTokenCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ValidateTokenMock.defaultExpectation != nil && afterValidateTokenCounter < 1 {
		if m.ValidateTokenMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to TokenUtilsMock.ValidateToken at\n%s", m.ValidateTokenMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to TokenUtilsMock.ValidateToken at\n%s with params: %#v", m.ValidateTokenMock.defaultExpectation.expectationOrigins.origin, *m.ValidateTokenMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcValidateToken != nil && afterValidateTokenCounter < 1 {
		m.t.Errorf("Expected call to TokenUtilsMock.ValidateToken at\n%s", m.funcValidateTokenOrigin)
	}

	if !m.ValidateTokenMock.invocationsDone() && afterValidateTokenCounter > 0 {
		m.t.Errorf("Expected %d calls to TokenUtilsMock.ValidateToken at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.ValidateTokenMock.expectedInvocations), m.ValidateTokenMock.expectedInvocationsOrigin, afterValidateTokenCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TokenUtilsMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGenerateTokenInspect()

			m.MinimockValidateTokenInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TokenUtilsMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TokenUtilsMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGenerateTokenDone() &&
		m.MinimockValidateTokenDone()
}
